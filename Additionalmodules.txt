Additional Modules1.Division2.Square3.Square RootDIVISION CODEmodule div(    input clock,    input reset,    input [7:0]ain,    input [7:0]bin,    output [15:0]mul_out    );    wire [31:0]log_out_a;    wire [31:0]log_out_b;    wire [31:0]log_sub;    wire log_cout;log obj11(clock,reset,ain,log_out_a); //log a (32 bits Q8.24)log obj21(clock,reset,bin,log_out_b); //log b (32 bits Q8.24)assign log_sub=log_out_a-log_out_b; antilog obj31(clock,reset,log_sub,mul_out); //antilog (16 bits)endmoduleSquaringmodule square(    input clock,    input reset,    input [7:0]ain,    output [15:0]sq_out    );    wire [31:0]log_out_a;    wire [31:0]l_shift;    wire log_cout;log obj11(clock,reset,ain,log_out_a); //log a (32 bits Q8.24)    assign l_shift=log_out_a<<<1'd1;    antilog obj21(clock,reset,l_shift,sq_out); //antilog (16 bits)endmodule	Square Rootmodule sq_rt(    input clock,    input reset,    input [7:0]ain,    output [15:0]sr_out    );    wire [31:0]log_out_a;    wire [31:0]l_shift;    wire log_cout;log obj11(clock,reset,ain,log_out_a); //log a (32 bits Q8.24)    assign l_shift=log_out_a>>>1'd1;    antilog obj21(clock,reset,l_shift,sr_out); //antilog (16 bits)endmoduleModules to be added1.log,2.antilog,3.adder,4.adder_14,5.adder_15,6.adder_24